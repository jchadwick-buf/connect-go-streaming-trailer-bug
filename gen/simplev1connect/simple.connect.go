// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: simple.proto

package simplev1connect

import (
	context "context"
	errors "errors"
	gen "example.com/connect-go-bug/gen"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SimpleServiceName is the fully-qualified name of the SimpleService service.
	SimpleServiceName = "simple.v1.SimpleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SimpleServiceUnaryProcedure is the fully-qualified name of the SimpleService's Unary RPC.
	SimpleServiceUnaryProcedure = "/simple.v1.SimpleService/Unary"
	// SimpleServiceStreamProcedure is the fully-qualified name of the SimpleService's Stream RPC.
	SimpleServiceStreamProcedure = "/simple.v1.SimpleService/Stream"
)

// SimpleServiceClient is a client for the simple.v1.SimpleService service.
type SimpleServiceClient interface {
	Unary(context.Context, *connect_go.Request[gen.Empty]) (*connect_go.Response[gen.Empty], error)
	Stream(context.Context, *connect_go.Request[gen.Empty]) (*connect_go.ServerStreamForClient[gen.Empty], error)
}

// NewSimpleServiceClient constructs a client for the simple.v1.SimpleService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSimpleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SimpleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &simpleServiceClient{
		unary: connect_go.NewClient[gen.Empty, gen.Empty](
			httpClient,
			baseURL+SimpleServiceUnaryProcedure,
			opts...,
		),
		stream: connect_go.NewClient[gen.Empty, gen.Empty](
			httpClient,
			baseURL+SimpleServiceStreamProcedure,
			opts...,
		),
	}
}

// simpleServiceClient implements SimpleServiceClient.
type simpleServiceClient struct {
	unary  *connect_go.Client[gen.Empty, gen.Empty]
	stream *connect_go.Client[gen.Empty, gen.Empty]
}

// Unary calls simple.v1.SimpleService.Unary.
func (c *simpleServiceClient) Unary(ctx context.Context, req *connect_go.Request[gen.Empty]) (*connect_go.Response[gen.Empty], error) {
	return c.unary.CallUnary(ctx, req)
}

// Stream calls simple.v1.SimpleService.Stream.
func (c *simpleServiceClient) Stream(ctx context.Context, req *connect_go.Request[gen.Empty]) (*connect_go.ServerStreamForClient[gen.Empty], error) {
	return c.stream.CallServerStream(ctx, req)
}

// SimpleServiceHandler is an implementation of the simple.v1.SimpleService service.
type SimpleServiceHandler interface {
	Unary(context.Context, *connect_go.Request[gen.Empty]) (*connect_go.Response[gen.Empty], error)
	Stream(context.Context, *connect_go.Request[gen.Empty], *connect_go.ServerStream[gen.Empty]) error
}

// NewSimpleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSimpleServiceHandler(svc SimpleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(SimpleServiceUnaryProcedure, connect_go.NewUnaryHandler(
		SimpleServiceUnaryProcedure,
		svc.Unary,
		opts...,
	))
	mux.Handle(SimpleServiceStreamProcedure, connect_go.NewServerStreamHandler(
		SimpleServiceStreamProcedure,
		svc.Stream,
		opts...,
	))
	return "/simple.v1.SimpleService/", mux
}

// UnimplementedSimpleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSimpleServiceHandler struct{}

func (UnimplementedSimpleServiceHandler) Unary(context.Context, *connect_go.Request[gen.Empty]) (*connect_go.Response[gen.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("simple.v1.SimpleService.Unary is not implemented"))
}

func (UnimplementedSimpleServiceHandler) Stream(context.Context, *connect_go.Request[gen.Empty], *connect_go.ServerStream[gen.Empty]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("simple.v1.SimpleService.Stream is not implemented"))
}
